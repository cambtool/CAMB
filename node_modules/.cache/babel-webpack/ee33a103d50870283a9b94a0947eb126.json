{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Loader.service\";\nimport * as i2 from \"ngx-spinner\";\nexport let LoaderInterceptorService = /*#__PURE__*/(() => {\n  class LoaderInterceptorService {\n    constructor(loaderService, spinner) {\n      this.loaderService = loaderService;\n      this.spinner = spinner;\n      this.requests = [];\n    }\n\n    removeRequest(req) {\n      const i = this.requests.indexOf(req);\n\n      if (i >= 0) {\n        this.requests.splice(i, 1);\n      } // console.log(i, this.requests.length);\n\n\n      this.loaderService.isLoading.next(this.requests.length > 0);\n    }\n\n    intercept(req, next) {\n      let headers = req; // for (const key of headers.headers.keys()) {\n      //   if (key == \"submit-spinner\") {\n      //     this.spinner.show();\n      //     setTimeout(() => {\n      //       this.spinner.hide();\n      //     }, 2000);\n      //   }\n      // }\n\n      this.requests.push(req);\n      this.loaderService.isLoading.next(true);\n      return Observable.create(observer => {\n        const subscription = next.handle(req).subscribe(event => {\n          if (event instanceof HttpResponse) {\n            this.removeRequest(req);\n            observer.next(event);\n          }\n        }, err => {\n          this.removeRequest(req);\n          observer.error(err);\n        }, () => {\n          this.removeRequest(req);\n          observer.complete();\n        }); // teardown logic in case of cancelled requests\n\n        return () => {\n          this.removeRequest(req);\n          subscription.unsubscribe();\n        };\n      });\n    }\n\n  }\n\n  LoaderInterceptorService.ɵfac = function LoaderInterceptorService_Factory(t) {\n    return new (t || LoaderInterceptorService)(i0.ɵɵinject(i1.LoaderService), i0.ɵɵinject(i2.NgxSpinnerService));\n  };\n\n  LoaderInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoaderInterceptorService,\n    factory: LoaderInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoaderInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}