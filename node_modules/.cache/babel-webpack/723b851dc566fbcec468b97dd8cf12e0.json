{"ast":null,"code":"import _asyncToGenerator from \"D:/dev/camb/camb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FormControl } from '@angular/forms';\nimport { timer } from 'rxjs';\nimport { ResultComponent } from '../result/result.component';\nimport { mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../dataformating.service\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"ngx-toastr\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/progress-spinner\";\n\nfunction EmbossSeqretComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"div\", 29);\n    i0.ɵɵelementStart(2, \"div\", 30);\n    i0.ɵɵelement(3, \"mat-progress-spinner\", 31);\n    i0.ɵɵelementStart(4, \"h2\");\n    i0.ɵɵtext(5, \"Your Job Is Still Processing\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"mode\", \"indeterminate\")(\"value\", \"Your Job Is Still Processing\");\n  }\n}\n\nfunction EmbossSeqretComponent_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const Stype_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", Stype_r10.value)(\"selected\", Stype_r10.defaultValue === true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", Stype_r10.label, \" \");\n  }\n}\n\nfunction EmbossSeqretComponent_option_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", item_r11.value)(\"selected\", item_r11.defaultValue);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r11.label, \" \");\n  }\n}\n\nfunction EmbossSeqretComponent_option_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", item_r12.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r12.label, \" \");\n  }\n}\n\nfunction EmbossSeqretComponent_option_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const Feature_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", Feature_r13.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", Feature_r13.label, \" \");\n  }\n}\n\nfunction EmbossSeqretComponent_option_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", item_r14.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r14.label, \" \");\n  }\n}\n\nfunction EmbossSeqretComponent_option_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const Reverse_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", Reverse_r15.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", Reverse_r15.label, \" \");\n  }\n}\n\nfunction EmbossSeqretComponent_option_61_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const Outputcase_r16 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", Outputcase_r16.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", Outputcase_r16.label, \" \");\n  }\n}\n\nfunction EmbossSeqretComponent_option_66_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const Seqrange_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", Seqrange_r17.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", Seqrange_r17.label, \" \");\n  }\n}\n\nfunction EmbossSeqretComponent_div_73_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 35);\n    i0.ɵɵelement(2, \"input\", 36);\n    i0.ɵɵelement(3, \"input\", 37);\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5, \" If available, the title will be included in the subject of the notification email and can be used as a way to identify your analysis\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let EmbossSeqretComponent = /*#__PURE__*/(() => {\n  class EmbossSeqretComponent {\n    constructor(fb, service, http, toaster, dialog) {\n      this.fb = fb;\n      this.service = service;\n      this.http = http;\n      this.toaster = toaster;\n      this.dialog = dialog;\n      this.inputformat = [];\n      this.outputformat = [];\n      this.name = '';\n      this.show = false;\n      this.show2 = false;\n      this.show3 = false;\n      this.showLoader = false;\n      this.isSubmitted = false;\n      this.stypeList = [];\n      this.feature = [];\n      this.firstonly = [];\n      this.reverse = [];\n      this.outputcase = [];\n      this.seqrange = [];\n      this.data = [];\n      this.jobId = '';\n      this.jobStatus = '';\n      this.buttonName = 'More option...';\n      this.registrationForm = this.fb.group({\n        sequence: new FormControl(''),\n        stype: new FormControl(''),\n        inputformat: new FormControl(''),\n        outputformat: new FormControl(''),\n        feature: new FormControl(''),\n        firstonly: new FormControl(''),\n        reverse: new FormControl(''),\n        outputcase: new FormControl(''),\n        seqrange: new FormControl(''),\n        email: new FormControl(''),\n        title: new FormControl('')\n      });\n    }\n\n    ngOnInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.stypeList = yield _this.service.getformat('emboss_seqret/parameterdetails/stype').toPromise();\n        console.log(_this.stypeList); // this.stypeList.values?.values.forEach((element:any) => {\n        //   if(element.defaultValue == true) {\n        //     this.registrationForm.get(\"stype\")?.setValue(element.value);\n        //   }\n        // });\n\n        _this.inputformat = yield _this.service.getformat('emboss_seqret/parameterdetails/inputformat').toPromise();\n        _this.outputformat = yield _this.service.getformat('emboss_seqret/parameterdetails/outputformat').toPromise();\n        _this.feature = yield _this.service.getformat('emboss_seqret/parameterdetails/feature').toPromise();\n        _this.firstonly = yield _this.service.getformat('emboss_seqret/parameterdetails/firstonly').toPromise();\n        _this.reverse = yield _this.service.getformat('emboss_seqret/parameterdetails/reverse').toPromise();\n        _this.outputcase = yield _this.service.getformat('emboss_seqret/parameterdetails/outputcase').toPromise();\n        _this.seqrange = yield _this.service.getformat('emboss_seqret/parameterdetails/seqrange').toPromise();\n      })();\n    }\n\n    toggle() {\n      this.registrationForm.controls.sequence.setValue(\"ATGCCCCCCTACACCGTGGTGTACTTCCCCGTGAGAGGCAGATGCGCCGCCCTGAGAATGCTGCTGGCCGACCAGGGCCAGAGCTGGAAGGAGGAGGTGGTGACCGTGGAGACCT GGCAGGAGGGCAGCCTGAAGGCCAGCTGCCTGTACGGCCAGCTGCCCAAGTTCCAGGACGGCGACCTGACCCTGTACCAGAGCAACACCATCCTGAGACACCTGGGCAGAACCCT GGGCCTGTACGGCAAGGACCAGCAGGAGGCCGCCCTGGTGGACATGGTGAACGACGGCGTGGAGGACCTGAGATGCAAGTACATCAGCCTGATCTACACCAACTACGAGGCCGGCAAGGACGACT ACGTGAAGGCCCTGCCCGGCCAGCTGAAGCCCTTCGAGACCCTGCTGAGCCAGAACCAGGGCGGCAAGACCTTCATCGTGGGCGACCAGATCAGCTTCGCCGACTACAACCTGCTGGACCTGCT GCTGATCCACGAGGTGCTGGCCCCCGGCTGCCTGGACGCCTTCCCCCTGCTGAGCGCCTACGTGGGCAGACTGAGCGCCAGACCCAAGCTGAAGGCCTTCCTGGCCAGCCCCGAGTACGTGAACCT GCCCATCAACGGCAACGGCAAGCAGTAG\");\n    }\n\n    checkbox() {\n      this.show3 = !this.show3;\n    }\n\n    handleClear() {\n      this.registrationForm.controls.sequence.setValue('');\n    }\n\n    onSubmit(xml) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n      let formdata = new FormData();\n      console.log(this.registrationForm.value);\n      formdata.append(\"email\", (_a = this.registrationForm.get('email')) === null || _a === void 0 ? void 0 : _a.value);\n      formdata.append(\"stype\", (_b = this.registrationForm.get('stype')) === null || _b === void 0 ? void 0 : _b.value);\n      formdata.append(\"title\", (_c = this.registrationForm.get('title')) === null || _c === void 0 ? void 0 : _c.value);\n      formdata.append(\"inputformat\", (_d = this.registrationForm.get('inputformat')) === null || _d === void 0 ? void 0 : _d.value);\n      formdata.append(\"outputformat\", (_e = this.registrationForm.get('outputformat')) === null || _e === void 0 ? void 0 : _e.value);\n      formdata.append(\"feature\", (_f = this.registrationForm.get('feature')) === null || _f === void 0 ? void 0 : _f.value);\n      formdata.append(\"firstonly\", (_g = this.registrationForm.get('firstonly')) === null || _g === void 0 ? void 0 : _g.value);\n      formdata.append(\"reverse\", (_h = this.registrationForm.get('reverse')) === null || _h === void 0 ? void 0 : _h.value);\n      formdata.append(\"outputcase\", (_j = this.registrationForm.get('outputcase')) === null || _j === void 0 ? void 0 : _j.value);\n      formdata.append(\"seqrange\", (_k = this.registrationForm.get('seqrange')) === null || _k === void 0 ? void 0 : _k.value);\n      formdata.append(\"sequence\", (_l = this.registrationForm.get('sequence')) === null || _l === void 0 ? void 0 : _l.value);\n      this.isSubmitted = true;\n\n      if (!this.registrationForm.valid) {\n        false;\n      }\n\n      this.service.EMB_Run(formdata).subscribe(success => {\n        console.log(success);\n      }, error => {\n        console.log(error);\n\n        if (error.status == 200) {\n          this.jobId = error.error.text;\n\n          if (this.jobId != null) {\n            this.getResult(); // this.service.EMBStatus(this.jobId).subscribe(\n            //   data => {\n            //     this.toaster.success(data.toString())\n            //   }, (error) => {\n            //     if (error.status == 200) {\n            //       this.jobStatus = error.error.text\n            //       this.toaster.info(this.jobStatus)\n            //       setTimeout(() => {\n            //         // if (this.jobStatus != \"FAILURE\") {\n            //         this.service.EMBResult(this.jobId, 'out').subscribe(\n            //           success => {\n            //             console.log(success);\n            //           },\n            //           error => {\n            //             console.log(error);\n            //             if (error.status == 200) {\n            //               let result = error.error.text;\n            //               const dialogRef = this.dialog.open(ResultComponent, {\n            //                 data: {\n            //                   text: result\n            //                 }\n            //               });\n            //             } else {\n            //               this.toaster.error(error.error)\n            //             }\n            //           }\n            //         )\n            //         // }\n            //       }, 15000);\n            //     }\n            //     else {\n            //       this.toaster.error(error.error)\n            //     }\n            //   }\n            // )\n          }\n        } else {\n          this.toaster.error(error.error);\n        }\n      });\n    }\n\n    getResult() {\n      this.showLoader = true;\n      this.currentSub = timer(10000).pipe(mergeMap(() => this.service.EMBStatus(this.jobId))).subscribe(response => {\n        console.log(response); // this.message_arr = response.resp;\n      }, error => {\n        var _a;\n\n        console.log(error);\n\n        if (error.status == 200) {\n          this.jobStatus = error.error.text;\n          this.toaster.info(this.jobStatus);\n\n          if (this.jobStatus != \"RUNNING\") {\n            this.service.EMBResult(this.jobId, 'out').subscribe(response => {\n              console.log(response); // this.message_arr = response.resp;\n            }, error => {\n              console.log(error);\n\n              if (error.status == 200) {\n                this.showLoader = false;\n                let result = error.error.text;\n                const dialogRef = this.dialog.open(ResultComponent, {\n                  data: {\n                    text: result\n                  }\n                });\n              } else {\n                this.toaster.error(error.error);\n                this.getResult();\n              }\n            });\n          } else {\n            if (this.jobStatus == \"RUNNING\") {\n              this.getResult();\n            } else {\n              this.showLoader = false;\n              (_a = this.currentSub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n            }\n          }\n        } else {\n          this.toaster.error(error.error);\n          this.getResult();\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      var _a;\n\n      (_a = this.currentSub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n\n  }\n\n  EmbossSeqretComponent.ɵfac = function EmbossSeqretComponent_Factory(t) {\n    return new (t || EmbossSeqretComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.DataformatingService), i0.ɵɵdirectiveInject(i3.HttpClient), i0.ɵɵdirectiveInject(i4.ToastrService), i0.ɵɵdirectiveInject(i5.MatDialog));\n  };\n\n  EmbossSeqretComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EmbossSeqretComponent,\n    selectors: [[\"app-embossSeqret\"]],\n    decls: 76,\n    vars: 11,\n    consts: [[1, \"positionRelative\"], [4, \"ngIf\"], [1, \"pack-head\"], [1, \"page-size\"], [1, \"form\"], [3, \"formGroup\"], [1, \"step-one-form\"], [1, \"step-one-drop-down\"], [\"formControlName\", \"stype\"], [3, \"ngValue\", \"selected\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"placeholder\", \"Your Message\", \"cdkTextareaAutosize\", \"\", \"cdkAutosizeMinRows\", \"6\", \"formControlName\", \"sequence\", 2, \"width\", \"99%\", \"resize\", \"vertical\", \"height\", \"200px\", \"outline-color\", \"#014371\"], [1, \"btn\"], [\"id\", \"equence-btn\", 3, \"click\"], [3, \"click\"], [1, \"step-two-form\"], [1, \"row\"], [1, \"col-md-4\", \"col-sm-4\", \"col-xs-12\"], [\"formControlName\", \"inputformat\"], [\"formControlName\", \"outputformat\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"feature\"], [\"formControlName\", \"firstonly\"], [\"placeholder\", \" FIRST ORF\", 3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"reverse\"], [\"formControlName\", \"outputcase\"], [\"formControlName\", \"seqrange\"], [1, \"step-three-form\"], [\"type\", \"checkbox\", \"id\", \"vehicle1\", \"name\", \"vehicle1\", \"value\", \"Bike\", 3, \"click\"], [\"id\", \"btnn\", \"type\", \"submit\", 3, \"click\"], [1, \"overlay\"], [1, \"progressBar\"], [1, \"custom-spinner\", 3, \"mode\", \"value\"], [3, \"ngValue\", \"selected\"], [3, \"ngValue\"], [\"placeholder\", \" FIRST ORF\", 3, \"ngValue\"], [1, \"job-frm\"], [\"id\", \"textbox\", \"type\", \"text\", \"placeholder\", \"Email\", \"formControlName\", \"email\"], [\"id\", \"textbox\", \"type\", \"text\", \"placeholder\", \"Title\", \"formControlName\", \"title\"]],\n    template: function EmbossSeqretComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, EmbossSeqretComponent_ng_container_1_Template, 6, 2, \"ng-container\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"h1\");\n        i0.ɵɵtext(5, \"EMBOSS Seqret\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 3);\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵelementStart(8, \"form\", 5);\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵtext(10, \"EMBOSS seqret reads and writes (returns) sequences. It is useful for a variety of tasks, including extracting sequences from databases, displaying sequences, reformatting sequences, producing the reverse complement of a sequence, extracting fragments of a sequence, sequence case conversion or any combination of the above functions.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"h2\");\n        i0.ɵɵtext(13, \"Step:1 - Enter your input sequence \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 7);\n        i0.ɵɵelementStart(15, \"p\");\n        i0.ɵɵtext(16, \"Enter a type of\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"select\", 8);\n        i0.ɵɵtemplate(18, EmbossSeqretComponent_option_18_Template, 2, 3, \"option\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"p\");\n        i0.ɵɵtext(20, \"Enter or paste a DNA/RNA sequence in any supported format:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"textarea\", 10);\n        i0.ɵɵtext(22, \"\\n      \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 11);\n        i0.ɵɵelementStart(24, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function EmbossSeqretComponent_Template_button_click_24_listener() {\n          return ctx.toggle();\n        });\n        i0.ɵɵtext(25, \" Use a examples equence \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function EmbossSeqretComponent_Template_button_click_26_listener() {\n          return ctx.handleClear();\n        });\n        i0.ɵɵtext(27, \"Clear\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 14);\n        i0.ɵɵelementStart(29, \"h2\");\n        i0.ɵɵtext(30, \"STEP 2 - Select Parameters\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"div\", 15);\n        i0.ɵɵelementStart(32, \"div\", 16);\n        i0.ɵɵelementStart(33, \"p\");\n        i0.ɵɵtext(34, \"Input Format\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"select\", 17);\n        i0.ɵɵtemplate(36, EmbossSeqretComponent_option_36_Template, 2, 3, \"option\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"div\", 16);\n        i0.ɵɵelementStart(38, \"p\");\n        i0.ɵɵtext(39, \"Output Format\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"select\", 18);\n        i0.ɵɵtemplate(41, EmbossSeqretComponent_option_41_Template, 2, 2, \"option\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"div\", 16);\n        i0.ɵɵelementStart(43, \"p\");\n        i0.ɵɵtext(44, \"Feature\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"select\", 20);\n        i0.ɵɵtemplate(46, EmbossSeqretComponent_option_46_Template, 2, 2, \"option\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"div\", 16);\n        i0.ɵɵelementStart(48, \"p\");\n        i0.ɵɵtext(49, \"First Only \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"select\", 21);\n        i0.ɵɵtemplate(51, EmbossSeqretComponent_option_51_Template, 2, 2, \"option\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(52, \"div\", 16);\n        i0.ɵɵelementStart(53, \"p\");\n        i0.ɵɵtext(54, \"Reverse\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"select\", 23);\n        i0.ɵɵtemplate(56, EmbossSeqretComponent_option_56_Template, 2, 2, \"option\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"div\", 16);\n        i0.ɵɵelementStart(58, \"p\");\n        i0.ɵɵtext(59, \"Output Case\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(60, \"select\", 24);\n        i0.ɵɵtemplate(61, EmbossSeqretComponent_option_61_Template, 2, 2, \"option\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"div\", 16);\n        i0.ɵɵelementStart(63, \"p\");\n        i0.ɵɵtext(64, \"Sequence Range\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(65, \"select\", 25);\n        i0.ɵɵtemplate(66, EmbossSeqretComponent_option_66_Template, 2, 2, \"option\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(67, \"div\", 26);\n        i0.ɵɵelementStart(68, \"h2\");\n        i0.ɵɵtext(69, \"STEP 3 - Submit your job\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"p\");\n        i0.ɵɵelementStart(71, \"input\", 27);\n        i0.ɵɵlistener(\"click\", function EmbossSeqretComponent_Template_input_click_71_listener() {\n          return ctx.checkbox();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(72, \" Be notified by email (Tick this box if you want to be notified by email when the results are available) \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(73, EmbossSeqretComponent_div_73_Template, 6, 0, \"div\", 1);\n        i0.ɵɵelementStart(74, \"button\", 28);\n        i0.ɵɵlistener(\"click\", function EmbossSeqretComponent_Template_button_click_74_listener() {\n          return ctx.onSubmit(ctx.registrationForm.value);\n        });\n        i0.ɵɵtext(75, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showLoader);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.registrationForm);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngForOf\", ctx.stypeList.values.values);\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"ngForOf\", ctx.inputformat.values.values);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.outputformat.values.values);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.feature.values.values);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.firstonly.values.values);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.reverse.values.values);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.outputcase.values.values);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.seqrange.values.values);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.show3);\n      }\n    },\n    directives: [i6.NgIf, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.FormControlName, i6.NgForOf, i1.DefaultValueAccessor, i7.MatProgressSpinner, i1.NgSelectOption, i1.ɵNgSelectMultipleOption],\n    styles: [\".positionRelative[_ngcontent-%COMP%]{position:relative!important}.overlay[_ngcontent-%COMP%]{background-color:#0006;width:100%;height:100%;position:absolute;top:0;left:0}.progressBar[_ngcontent-%COMP%]{width:50%;margin:0 auto;position:absolute;top:10%;left:0;right:0;padding:20px;z-index:2}.progressBar[_ngcontent-%COMP%]   .custom-spinner[_ngcontent-%COMP%]{margin:0 auto}.progressBar[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{text-align:center;margin:0;font-size:25px;padding-top:20px;color:#fff}.custom-spinner[_ngcontent-%COMP%]   .mat-progress-spinner-circle[_ngcontent-%COMP%]{stroke:red}.custom-spinner[_ngcontent-%COMP%]   .mat-progress-spinner-circle[_ngcontent-%COMP%], .custom-spinner[_ngcontent-%COMP%]   .mat-progress-spinner-circle.mat-progress-spinner-primary[_ngcontent-%COMP%]{stroke:#00f}.custom-spinner[_ngcontent-%COMP%]   .mat-progress-spinner-circle.mat-progress-spinner-primary[_ngcontent-%COMP%]   .mat-progress-spinner-path[_ngcontent-%COMP%]{stroke:green}  .mat-progress-spinner circle{stroke:#fff!important}\"]\n  });\n  return EmbossSeqretComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}